// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright 2022-2025, John McNamara, jmcnamara@cpan.org

use crate::common;
use rust_xlsxwriter::{Chart, ChartType, Workbook, XlsxError};

// Create a rust_xlsxwriter file to compare against an Excel file.
fn create_new_xlsx_file_1(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();

    let worksheet = workbook.add_worksheet();

    // Add some test data for the chart(s).
    // Row 0 - Headers
    worksheet.write_string(0, 0, "Types")?;
    worksheet.write_string(0, 1, "Sub Type")?;
    worksheet.write_string(0, 2, "Value 1")?;
    worksheet.write_string(0, 3, "Value 2")?;
    worksheet.write_string(0, 4, "Value 3")?;

    // Row 1
    worksheet.write_string(1, 0, "Type 1")?;
    worksheet.write_string(1, 1, "Sub Type A")?;
    worksheet.write_number(1, 2, 5000)?;
    worksheet.write_number(1, 3, 8000)?;
    worksheet.write_number(1, 4, 6000)?;

    // Row 2
    worksheet.write_string(2, 0, "")?;
    worksheet.write_string(2, 1, "Sub Type B")?;
    worksheet.write_number(2, 2, 2000)?;
    worksheet.write_number(2, 3, 3000)?;
    worksheet.write_number(2, 4, 4000)?;

    // Row 3
    worksheet.write_string(3, 0, "")?;
    worksheet.write_string(3, 1, "Sub Type C")?;
    worksheet.write_number(3, 2, 250)?;
    worksheet.write_number(3, 3, 1000)?;
    worksheet.write_number(3, 4, 2000)?;

    // Row 4
    worksheet.write_string(4, 0, "Type 2")?;
    worksheet.write_string(4, 1, "Sub Type D")?;
    worksheet.write_number(4, 2, 6000)?;
    worksheet.write_number(4, 3, 6000)?;
    worksheet.write_number(4, 4, 6500)?;

    // Row 5
    worksheet.write_string(5, 0, "")?;
    worksheet.write_string(5, 1, "Sub Type E")?;
    worksheet.write_number(5, 2, 500)?;
    worksheet.write_number(5, 3, 300)?;
    worksheet.write_number(5, 4, 200)?;

    let mut chart = Chart::new(ChartType::Column);

    chart
        .add_series()
        .set_name("=Sheet1!$C$1")
        .set_categories("=Sheet1!$A$2:$B$6")
        .set_values("=Sheet1!$C$2:$C$6");

    chart
        .add_series()
        .set_name("=Sheet1!$D$1")
        .set_categories("=Sheet1!$A$2:$B$6")
        .set_values("=Sheet1!$D$2:$D$6");

    chart
        .add_series()
        .set_name("=Sheet1!$E$1")
        .set_categories("=Sheet1!$A$2:$B$6")
        .set_values("=Sheet1!$E$2:$E$6");

    // Set the chart axis ids to match the random values in the Excel file.
    chart.set_axis_ids(45886080, 45928832);

    worksheet.insert_chart(8, 4, &chart)?;

    workbook.save(filename)?;

    Ok(())
}

// Test with 2D list syntax for ranges.
fn create_new_xlsx_file_2(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();

    let worksheet = workbook.add_worksheet();

    // Add some test data for the chart(s).
    // Row 0 - Headers
    worksheet.write_string(0, 0, "Types")?;
    worksheet.write_string(0, 1, "Sub Type")?;
    worksheet.write_string(0, 2, "Value 1")?;
    worksheet.write_string(0, 3, "Value 2")?;
    worksheet.write_string(0, 4, "Value 3")?;

    // Row 1
    worksheet.write_string(1, 0, "Type 1")?;
    worksheet.write_string(1, 1, "Sub Type A")?;
    worksheet.write_number(1, 2, 5000)?;
    worksheet.write_number(1, 3, 8000)?;
    worksheet.write_number(1, 4, 6000)?;

    // Row 2
    worksheet.write_string(2, 0, "")?;
    worksheet.write_string(2, 1, "Sub Type B")?;
    worksheet.write_number(2, 2, 2000)?;
    worksheet.write_number(2, 3, 3000)?;
    worksheet.write_number(2, 4, 4000)?;

    // Row 3
    worksheet.write_string(3, 0, "")?;
    worksheet.write_string(3, 1, "Sub Type C")?;
    worksheet.write_number(3, 2, 250)?;
    worksheet.write_number(3, 3, 1000)?;
    worksheet.write_number(3, 4, 2000)?;

    // Row 4
    worksheet.write_string(4, 0, "Type 2")?;
    worksheet.write_string(4, 1, "Sub Type D")?;
    worksheet.write_number(4, 2, 6000)?;
    worksheet.write_number(4, 3, 6000)?;
    worksheet.write_number(4, 4, 6500)?;

    // Row 5
    worksheet.write_string(5, 0, "")?;
    worksheet.write_string(5, 1, "Sub Type E")?;
    worksheet.write_number(5, 2, 500)?;
    worksheet.write_number(5, 3, 300)?;
    worksheet.write_number(5, 4, 200)?;

    let mut chart = Chart::new(ChartType::Column);

    chart
        .add_series()
        .set_name(("Sheet1", 0, 2))
        .set_categories(("Sheet1", 1, 0, 5, 1))
        .set_values(("Sheet1", 1, 2, 5, 2));

    chart
        .add_series()
        .set_name(("Sheet1", 0, 3))
        .set_categories(("Sheet1", 1, 0, 5, 1))
        .set_values(("Sheet1", 1, 3, 5, 3));

    chart
        .add_series()
        .set_name(("Sheet1", 0, 4))
        .set_categories(("Sheet1", 1, 0, 5, 1))
        .set_values(("Sheet1", 1, 4, 5, 4));

    // Set the chart axis ids to match the random values in the Excel file.
    chart.set_axis_ids(45886080, 45928832);

    worksheet.insert_chart(8, 4, &chart)?;

    workbook.save(filename)?;

    Ok(())
}

#[test]
fn test_chart_clustered01_1() {
    let test_runner = common::TestRunner::new()
        .set_name("chart_clustered01")
        .unique("1")
        .set_function(create_new_xlsx_file_1)
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

#[test]
fn test_chart_clustered01_2() {
    let test_runner = common::TestRunner::new()
        .set_name("chart_clustered01")
        .unique("2")
        .set_function(create_new_xlsx_file_2)
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

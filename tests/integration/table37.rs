// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright 2022-2025, John McNamara, jmcnamara@cpan.org

use crate::common;
use rust_xlsxwriter::{Chart, ChartType, Table, Workbook, XlsxError};

// Create a rust_xlsxwriter file to compare against an Excel file.
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();

    let worksheet = workbook.add_worksheet();

    worksheet.write(1, 0, 1)?;
    worksheet.write(2, 0, 2)?;
    worksheet.write(3, 0, 3)?;
    worksheet.write(4, 0, 4)?;
    worksheet.write(5, 0, 5)?;

    worksheet.write(1, 1, 10)?;
    worksheet.write(2, 1, 15)?;
    worksheet.write(3, 1, 20)?;
    worksheet.write(4, 1, 10)?;
    worksheet.write(5, 1, 15)?;

    worksheet.set_column_width(0, 10.288)?;
    worksheet.set_column_width(1, 10.288)?;

    let table = Table::new();
    worksheet.add_table(0, 0, 5, 1, &table)?;

    let mut chart = Chart::new(ChartType::Column);
    chart.set_axis_ids(88157568, 89138304);
    chart
        .add_series()
        .set_name("=Sheet1!$B$1")
        .set_categories("=Sheet1!$A$2:$A$6")
        .set_values("=Sheet1!$B$2:$B$6");

    chart.title().set_hidden();

    worksheet.insert_chart(8, 4, &chart)?;

    workbook.save(filename)?;

    Ok(())
}

#[test]
fn test_table37() {
    let test_runner = common::TestRunner::new()
        .set_name("table37")
        .set_function(create_new_xlsx_file)
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}
